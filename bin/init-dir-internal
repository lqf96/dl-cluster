#! /bin/bash

# Bold text
PROMPT_BOLD="$(tput bold)"
# Colored text
PROMPT_COLOR_GREEN="$(tput setaf 2)"
PROMPT_COLOR_WHITE="$(tput setaf 7)"
# Reset text
PROMPT_RESET="$(tput sgr0)"

prompt() {
    # Make prompt bold and colored for terminal
    if [ -t 0 ]; then
        echo "${PROMPT_BOLD}${PROMPT_COLOR_GREEN}==>${PROMPT_COLOR_WHITE} $1${PROMPT_RESET}"
    # Plain prompt
    else
        echo "==> $1"
    fi
}

# Switch to shared directory
cd "${DL_SHARED_DIR}"

# Install Miniconda/Anaconda
prompt "Installing Miniconda/Anaconda ..."
if [ "${DL_REINSTALL_CONDA}" = "1" ]; then
    rm -rf ./conda
fi
sh /tmp/conda-installer.sh -b -p ./conda
# Initialize Conda for current shell
eval "$(./conda/bin/conda shell.bash hook)"

# Create directory structure
prompt "Creating directory structure ..."
if [ "${DL_DELETE_DATA}" = "1" ]; then
    rm -rf ./cache \
        ./data \
        ./env
fi
mkdir -p ./cache/conda \
    ./cache/pip \
    ./data/shared \
    ./data/users \
    ./env/shared \
    ./env/users

# Cache directories
export CONDA_PKGS_DIRS="${DL_SHARED_DIR}/cache/conda"
export PIP_CACHE_DIR="${DL_SHARED_DIR}/cache/pip"
# Shared environments directory
export CONDA_ENVS_PATH="${DL_SHARED_DIR}/envs/shared"

# Create cluster environment
prompt "Creating cluster environment from specification ..."
conda env create -f /tmp/cluster-env-spec.yml -n "${DL_DEFAULT_ENV}"
