#! /usr/bin/env python3
from __future__ import annotations

from typing import TYPE_CHECKING

import os, platform, secrets, shutil, subprocess, sys, json, curses
from collections.abc import Mapping
from argparse import ArgumentParser
from tempfile import TemporaryDirectory, NamedTemporaryFile

if TYPE_CHECKING:
    from typing import Any, Optional, TextIO, Union
    from collections.abc import Iterable, Iterator, Sequence

# Root (repository) directory
ROOT_DIR = os.path.realpath(os.path.join(os.path.dirname(__file__), ".."))

curses.setupterm()

def tput(cap_name: str, *args: int) -> str:
    return curses.tparm(curses.tigetstr(cap_name), *args).decode()

# Bold text
PROMPT_BOLD = tput("bold")
# Colored text
PROMPT_COLOR_RED = tput("setaf", 1)
PROMPT_COLOR_GREEN = tput("setaf", 2)
PROMPT_COLOR_WHITE = tput("setaf", 7)
# Reset text
PROMPT_RESET = tput("sgr0")

class Arg:
    def __init__(self, *names_or_flags: str, **kwargs: Any):
        self.names_or_flags = names_or_flags
        self.kwargs = kwargs

class CommandGroup:
    def __init__(self, cmds: Mapping[str, Command], **kwargs: Any):
        self.cmds = cmds
        self.kwargs = kwargs

class Command:
    def __init__(self, help: Optional[str] = None, args: Sequence[Arg] = (),
        cmd_groups: Sequence[CommandGroup] = (), **parser_kwargs: Any):
        self.help = help
        self.args = args
        self.cmd_groups = cmd_groups
        self.parser_kwargs = parser_kwargs

    def init_parser(self, parser: Optional[ArgumentParser] = None) -> ArgumentParser:
        # Create parser
        if parser is None:
            parser = ArgumentParser(description=self.help, **self.parser_kwargs)

        # Add arguments for command
        for arg in self.args:
            parser.add_argument(*arg.names_or_flags, **arg.kwargs)
        # Create and initialize sub-parsers
        for cmd_group in self.cmd_groups:
            sub_parsers = parser.add_subparsers(**cmd_group.kwargs)
            for name, cmd in cmd_group.cmds.items():
                cmd.init_parser(sub_parsers.add_parser(
                    name, description=cmd.help, help=cmd.help, **cmd.parser_kwargs
                ))
        
        return parser

def prompt(text: str, color_seq: str = PROMPT_COLOR_GREEN, file: TextIO = sys.stdout):
    # Make prompt bold and colored for terminal
    if file.isatty():
        text = f"{PROMPT_BOLD}{color_seq}==>{PROMPT_COLOR_WHITE} {text}{PROMPT_RESET}"
    # Plain prompt
    else:
        text = f"==> {text}"
    # Print text to file
    print(text, file=file)

def run(program: str, *args: str):
    # Resolve program path
    program = shutil.which(program) or program
    # Run program
    proc = subprocess.run((program,)+args, stdout=sys.stdout, stderr=sys.stderr)
    # Print error and exit early if command fails
    if proc.returncode!=0:
        prompt(f"Error: Command {proc.args} returned with code {proc.returncode}", color_seq=PROMPT_COLOR_RED)
        exit(1)

def args_list(flag: str, args: Union[Iterable[str], Mapping[str, str]], sep: str = "=") -> Iterator[str]:
    # Concatenate key-value pair into a single argument
    if isinstance(args, Mapping):
        args = (key+sep+value for key, value in args.items())
    # Interleave flags with arguments
    for arg in args:
        yield flag
        yield arg

def mkdirp(*paths: str):
    for path in paths:
        os.makedirs(path, exist_ok=True)

# Registry mirror service directory
REGISTRY_SERVICE_DIR = f"{ROOT_DIR}/services/registry-mirror"

def registry_start():
    prompt("Starting registry mirror service ...")
    run("docker-compose", "--project-directory", REGISTRY_SERVICE_DIR, "up", "-d")

def registry_status():
    run("docker-compose", "--project-directory", REGISTRY_SERVICE_DIR, "ps")

def registry_stop():
    prompt("Stopping registry mirror service ...")
    run("docker-compose", "--project-directory", REGISTRY_SERVICE_DIR, "down")

# Required cluster configuration items
REQUIRED_CONFIG_ITEMS = (
    "cf_tunnel",
)
# Default cluster configuration
DEFAULT_CONFIG = {
    "det_image_ns": "determinedai",
    "det_version": "0.21.0",
    "network_name": "dl-cluster",
    "env_image_name": "lqf96/dl-cluster-env",
    "env_base_image": "continuumio/miniconda3:latest",
    "python_version": "3.10",
    "shared_dir": "/mnt/cluster",
    "cluster_name": "dl-cluster"
}

def load_cluster_config(config_path: str) -> dict[str, str]:
    # Load cluster configuration
    with open(config_path) as f_config:
        config: dict[str, str] = json.load(f_config)
    
    # Check required items
    for item in REQUIRED_CONFIG_ITEMS:
        if item not in config:
            raise ValueError(f"missing required configuration item: '{item}'")
    # Merge default configuration
    for item, default_value in DEFAULT_CONFIG.items():
        config.setdefault(item, default_value)
    
    return config

# Cluster service stack directory
CLUSTER_SERVICE_NAME = "dl-cluster"
# Cluster service stack file
CLUSTER_SERVICE_FILE = f"{ROOT_DIR}/services/cluster/docker-compose.yml"

def format_env_image_version(base_image: str, python_version: str, det_version: str) -> str:
    image_version = base_image.replace("/", "-").replace(":", "-")
    image_version += "-py-"+python_version
    image_version += "-det-"+det_version

    return image_version

def cluster_start(cluster_config: str):
    # Load cluster configuration from file
    config = load_cluster_config(cluster_config)

    # Determined version
    det_version = config["det_version"]
    # Environment image
    env_image_version = format_env_image_version(
        config["env_base_image"], config["python_version"], det_version
    )
    env_image = config["env_image_name"]+":"+env_image_version
    
    # Set environment variables for service stack
    os.environ.update({
        "DL_CLUSTER_MASTER": platform.node(),
        "DL_DET_IMAGE_NS": config["det_image_ns"],
        "DL_DET_VERSION": config["det_version"],
        "DL_NETWORK_NAME": config["network_name"],
        "DL_ENV_IMAGE": env_image,
        "DL_SHARED_DIR": config["shared_dir"],
        "DL_CLUSTER_NAME": config["cluster_name"]
    })
    
    # Start service stack
    prompt("Starting cluster service stack ...")
    run("docker", "stack", "deploy", "-c", CLUSTER_SERVICE_FILE, CLUSTER_SERVICE_NAME)

def cluster_status():
    run("docker", "stack", "ps", CLUSTER_SERVICE_NAME)

def cluster_stop():
    prompt("Stopping cluster service stack ...")
    run("docker", "stack", "rm", CLUSTER_SERVICE_NAME)

ENV_IMAGE_DIR = f"{ROOT_DIR}/images/dl-cluster"

def build_env_image(cluster_config: str):
    # Load cluster configuration from file
    config = load_cluster_config(cluster_config)

    prompt("Loading system packages to be installed ...")
    # Load system packages list from file
    with open(f"{ENV_IMAGE_DIR}/sys-pkgs.txt") as f_sys_pkgs:
        sys_pkgs = " ".join(filter(
            lambda line: line and line[0]!="#",
            f_sys_pkgs.read().splitlines()
        ))

    prompt("Preparing cluster environment specification ...")
    # Load and instantiate specification template
    with open(f"{ENV_IMAGE_DIR}/cluster-env-spec.template.yml") as f_spec_template:
        cluster_env_spec = f_spec_template.read().format(
            dl_python_version=config["python_version"],
            dl_det_version=config["det_version"]
        )
    
    # Image version
    env_base_image = config["env_base_image"]
    env_image_version = format_env_image_version(
        env_base_image, config["python_version"], config["det_version"]
    )
    # Build arguments
    build_args = {
        "DL_BASE_IMAGE": env_base_image,
        "DL_SYS_PACKAGES": sys_pkgs
    }
    
    prompt(f"Building Determined environment image from '{env_base_image}' ...")
    # Build environment image
    with NamedTemporaryFile("w", prefix=".", dir=ENV_IMAGE_DIR) as f_spec:
        # Write specification to temporary file
        f_spec.write(cluster_env_spec)
        f_spec.flush()
        # Get specification file name
        build_args["DL_CLUSTER_ENV_SPEC"] = os.path.basename(f_spec.name)
        
        env_image_name = config["env_image_name"]
        run(
            "docker", "build", "-t", f"{env_image_name}:{env_image_version}",
            *args_list("--build-arg", build_args), ENV_IMAGE_DIR
        )

def make_det_image(role: str, det_version: str, image_ns: str, build_dir: str):
    # Generate random temporary container name
    container_name = f"tmp-{secrets.token_hex(8)}"

    # Create temporary container
    run(
        "docker", "create", "--name", container_name,
        f"determinedai/determined-{role}:{det_version}"
    )
    # Copy binary to container
    run("docker", "cp", f"{build_dir}/determined-{role}", f"{container_name}:/usr/bin")
    # Commit container as image
    run("docker", "commit", container_name, f"{image_ns}/determined-{role}:{det_version}")
    # Remove temporary container
    run("docker", "rm", container_name)

# Script for building Determined Go binaries
DET_BUILD_SCRIPT_FILE = "build-det-internal"

def build_det_images(build_image: str, det_version: str, image_ns: str):
    with TemporaryDirectory() as build_dir:
        # Bind mounts for container
        bind_mounts = (
            f"{ROOT_DIR}/bin/{DET_BUILD_SCRIPT_FILE}:/usr/local/bin/{DET_BUILD_SCRIPT_FILE}",
            f"{build_dir}:/build"
        )
        # Environment variables for container
        envs = {
            "DL_DET_VERSION": det_version
        }

        # Run build steps in container
        prompt(f"Building Determined binaries in container ...")
        run(
            "docker", "run", "--rm", "-it", *args_list("-v", bind_mounts),
            *args_list("-e", envs), build_image, DET_BUILD_SCRIPT_FILE
        )
        # Create master image
        prompt(f"Creating master image ...")
        make_det_image("master", det_version, image_ns, build_dir)
        # Make agent image
        prompt(f"Creating agent image ...")
        make_det_image("agent", det_version, image_ns, build_dir)

# Script for initializing shared directory
DET_INIT_SCRIPT_FILE = "init-dir-internal"

def init_shared_dir(cluster_config: str, delete_data: bool):
    # Shared directory must be initialized as root
    if os.getuid()!=0:
        raise RuntimeError("you must initialize shared directory as root")

    # Load cluster configuration from file
    config = load_cluster_config(cluster_config)
    # Shared directory
    shared_dir = config["shared_dir"]

    # Delete data if requested
    if delete_data:
        for sub_dir in ("data", "envs", "cache", "checkpoints"):
            shutil.rmtree(f"{shared_dir}/{sub_dir}")
    
    # Create directory structure
    for sub_dir in (
        "data/shared",
        "data/users",
        "envs/shared",
        "envs/users",
        "cache/conda",
        "cache/pip",
        "checkpoints"
    ):
        os.makedirs(f"{shared_dir}/{sub_dir}", exist_ok=True)

# Default cluster configuration path
DEFAULT_CONFIG_PATH = f"{ROOT_DIR}/etc/dl-cluster/config.json"
# Default Determined build image
DEFAULT_DET_BUILD_IMAGE = "ubuntu:20.04"
# Default environment base image
DEFAULT_ENV_BASE_IMAGE = "continuumio/miniconda3:latest"

def main():
    # Cluster configuration file argument
    cluster_config_arg = Arg(
        "-c", "--cluster-config", default=DEFAULT_CONFIG_PATH,
        help="Path to the cluster configuration file."
    )

    # CLI commands
    commands = {
        # [ Registry Service Management ]
        "registry-start": Command(
            help="Start Docker registry mirror service."
        ),
        "registry-status": Command(
            help="Get status of Docker registry mirror service."
        ),
        "registry-stop": Command(
            help="Stop Docker registry mirror service."
        ),
        # [ Cluster Service Stack Management ]
        "cluster-start": Command(
            help="Start DL cluster service stack.",
            args=(cluster_config_arg,)
        ),
        "cluster-status": Command(
            help="Get status of DL cluster service stack."
        ),
        "cluster-stop": Command(
            help="Stop DL cluster service stack."
        ),
        # [ Environment Preparation ]
        "build-env-image": Command(
            help="Build Determined container environment image.",
            args=(cluster_config_arg,)
        ),
        "build-det-images": Command(
            help="Build Determined master and agent images.",
            args=(
                Arg(
                    "-n", "--image-ns", required=True,
                    help="Namespace of target images."
                ),
                Arg(
                    "-b", "--build-image", default=DEFAULT_DET_BUILD_IMAGE,
                    help="Image of temporary container to build Determined binaries."
                ),
                Arg(
                    "-v", "--det-version", default=DEFAULT_CONFIG["det_version"],
                    help="Version of Determined release."
                )
            )
        ),
        "init-shared-dir": Command(
            help="Initialize cluster shared directory.",
            args=(
                cluster_config_arg,
                Arg(
                    "--delete-data", default=False, action="store_true",
                    help="Delete existing data in shared directory"
                )
            )
        )
    }
    # Build CLI parser
    parser = Command(
        help="DL cluster management utilities.",
        cmd_groups=(
            CommandGroup(commands, dest="cmd", required=True),
        )
    ).init_parser()
    # Parse CLI arguments
    args = parser.parse_args()
    
    # Command handlers
    command_handlers = {
        # [ Registry Service Management ]
        "registry-start": registry_start,
        "registry-status": registry_status,
        "registry-stop": registry_stop,
        # [ Cluster Service Stack Management ]
        "cluster-start": cluster_start,
        "cluster-status": cluster_status,
        "cluster-stop": cluster_stop,
        # [ Environment Preparation ]
        "build-env-image": build_env_image,
        "build-det-images": build_det_images,
        "init-shared-dir": init_shared_dir
    }
    # Find and invoke command handler
    args_dict = args.__dict__
    cmd_name = args_dict.pop("cmd")
    command_handlers[cmd_name](**args_dict)

if __name__=="__main__":
    main()
